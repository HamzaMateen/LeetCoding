#include <iterator>
#include <regex>
#include <string>
#include <vector>

int splitIntoWords(const std::string &sentence) {
  std::regex word_regex(R"(\b\w+\b)");
  std::vector<std::string> words;

  auto words_begin =
      std::sregex_iterator(sentence.begin(), sentence.end(), word_regex);
  auto words_end = std::sregex_iterator();

  std::string last_elem = *(std::prev(words_begin->end()));

  return last_elem.size();
}

const char *ws = " \t\n\r\f\v";

// trim from end of string (right)
inline std::string &rtrim(std::string &s, const char *t = ws) {
  s.erase(s.find_last_not_of(t) + 1);
  return s;
}

// trim from beginning of string (left)
inline std::string &ltrim(std::string &s, const char *t = ws) {
  s.erase(0, s.find_first_not_of(t));
  return s;
}

// trim from both ends of string (right then left)
inline std::string &trim(std::string &s, const char *t = ws) {
  return ltrim(rtrim(s, t), t);

  class Solution {
  public:
    int lengthOfLastWord(std::string s) {
      // trim the input string
      trim(s);
      return last_word_length(s);
    }
  };
